export interface ComponentSection {
  id: string;
  title: string;
  description: string;
  category: string;
  features: string[];
  benefits: string[];
}

export interface PDFContentStructure {
  title: string;
  subtitle: string;
  sections: {
    header: {
      title: string;
      description: string;
    };
    components: ComponentSection[];
    selectedComponents: {
      title: string;
      items: Array<{
        category: string;
        items: string[];
      }>;
    };
    footer: {
      text: string;
      timestamp: string;
    };
  };
}

/**
 * Process sidebarContentMapper into structured PDF content
 */
export function processSidebarContent(sidebarContent: Record<string, { title: string; content: string }>): ComponentSection[] {
  const components: ComponentSection[] = [];
  
  Object.entries(sidebarContent).forEach(([key, data]) => {
    // Skip default entries
    if (key === 'default' || !data.title || data.title === 'Default Title') {
      return;
    }
    
    // Clean and structure the content
    const cleanContent = data.content
      .trim()
      .replace(/[\r\n]+/g, ' ')
      .replace(/[^\x20-\x7E]/g, ' ')
      .replace(/\s+/g, ' ')
      .trim();
    
    // Extract features and benefits from the content
    const features: string[] = [];
    const benefits: string[] = [];
    
    // Split content into sentences and categorize
    const sentences = cleanContent.split('.').filter(s => s.trim().length > 10);
    
    sentences.forEach(sentence => {
      const trimmed = sentence.trim();
      if (trimmed.includes('Core Features') || trimmed.includes('Features') || trimmed.includes('â€¢')) {
        features.push(trimmed);
      } else if (trimmed.includes('Business Impact') || trimmed.includes('Benefits') || trimmed.includes('Impact')) {
        benefits.push(trimmed);
      } else if (trimmed.length > 50) {
        // Add as general description
        features.push(trimmed);
      }
    });
    
    // Determine category based on key patterns
    let category = 'General';
    if (key.includes('LC') || key.includes('COLLECTION') || key.includes('FINANCING')) {
      category = 'Trade Finance';
    } else if (key.includes('PAYMENT') || key.includes('CASH') || key.includes('SWEEP')) {
      category = 'Cash Management';
    } else if (key.includes('SCF') || key.includes('SUPPLY') || key.includes('FINANCING')) {
      category = 'Supply Chain Finance';
    } else if (key.includes('CHANNEL') || key.includes('WEB') || key.includes('MOBILE') || key.includes('API')) {
      category = 'Channels';
    } else if (key.includes('DATA') || key.includes('AUDIT') || key.includes('LOG')) {
      category = 'Data Management';
    } else if (key.includes('AUTH') || key.includes('SSO') || key.includes('SECURITY')) {
      category = 'Security';
    } else if (key.includes('REPORT') || key.includes('DASHBOARD') || key.includes('ANALYTICS')) {
      category = 'Reporting & Analytics';
    }
    
    components.push({
      id: key,
      title: data.title,
      description: cleanContent,
      category,
      features: features.slice(0, 10), // Limit to 10 features
      benefits: benefits.slice(0, 8), // Limit to 8 benefits
    });
  });
  
  return components.sort((a, b) => {
    // Sort by category first, then by title
    if (a.category !== b.category) {
      return a.category.localeCompare(b.category);
    }
    return a.title.localeCompare(b.title);
  });
}

/**
 * Create structured PDF content
 */
export function createPDFContent(
  companyName: string,
  userName: string,
  email: string,
  selections: Record<string, string[]>,
  sidebarContent: Record<string, { title: string; content: string }>
): PDFContentStructure {
  const components = processSidebarContent(sidebarContent);
  
  // Group selected components by category
  const selectedItems = Object.entries(selections)
    .filter(([_, items]) => items.length > 0)
    .map(([category, items]) => ({
      category,
      items
    }));
  
  return {
    title: 'Veefin Financial Architecture',
    subtitle: `Platform Overview for ${companyName}`,
    sections: {
      header: {
        title: 'Veefin Financial Architecture Platform',
        description: `Comprehensive financial technology platform designed for ${companyName}. This document outlines all available components, features, and capabilities.`
      },
      components,
      selectedComponents: {
        title: 'Your Selected Components',
        items: selectedItems
      },
      footer: {
        text: 'Generated by Veefin Platform',
        timestamp: new Date().toLocaleDateString()
      }
    }
  };
}

/**
 * Generate unique filename for PDF
 */
export function generateUniquePDFFilename(companyName: string): string {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const companySlug = companyName.replace(/[^a-zA-Z0-9]/g, '_').toLowerCase();
  return `veefin_architecture_${companySlug}_${timestamp}.pdf`;
}

/**
 * Format text for PDF display
 */
export function formatTextForPDF(text: string, maxLength: number = 500): string {
  return text
    .replace(/[\r\n]+/g, ' ')
    .replace(/[^\x20-\x7E]/g, ' ')
    .replace(/\s+/g, ' ')
    .trim()
    .substring(0, maxLength);
}

/**
 * Group components by category for better organization
 */
export function groupComponentsByCategory(components: ComponentSection[]): Record<string, ComponentSection[]> {
  return components.reduce((groups, component) => {
    const category = component.category;
    if (!groups[category]) {
      groups[category] = [];
    }
    groups[category].push(component);
    return groups;
  }, {} as Record<string, ComponentSection[]>);
}
